package playground

import (
	"asm"
	"codegen"
	"fmt"
	"irs"
)

func testAssembler() {
	writer := codegen.NewWriter()
	writer.EnterFunction(&irs.GlobalSymbol{Symbol: &irs.Symbol{Name: "test"}})
	raxFam := codegen.GetIntegralRegisterFamily(codegen.RAX)
	r10Fam := codegen.GetIntegralRegisterFamily(codegen.R10)
	rspFam := codegen.GetIntegralRegisterFamily(codegen.RSP)
	rcxFam := codegen.GetIntegralRegisterFamily(codegen.RCX)
	xmm0Fam := codegen.GetFloatingRegisterFamily(codegen.XMM0)
	xmm1Fam := codegen.GetFloatingRegisterFamily(codegen.XMM1)
	xmm8Fam := codegen.GetFloatingRegisterFamily(codegen.XMM8)
	xmm9Fam := codegen.GetFloatingRegisterFamily(codegen.XMM9)
	reg1 := codegen.GetIntegralRegisterFamily(codegen.R12).UseForSize(codegen.DWORD_SIZE)
	reg2 := codegen.GetIntegralRegisterFamily(codegen.RAX).UseForSize(codegen.QWORD_SIZE)
	// writer.MovIntegralRegisterToIntegralRegister(reg1, reg2) // mov eax, ecx -> 89 c8 
	// writer.MovMemoryToIntegralRegister(reg1, codegen.RegisterMemoryAccessor{reg2}) // mov eax, [ecx] -> 67 8b 01
	// writer.MovIntegralRegisterToMemory(codegen.RegisterMemoryAccessor{reg2}, reg1) // mov [ecx], eax -> 67 89 01
	// writer.MovIntegralRegisterToMemory(codegen.RegisterMemoryAccessor{reg1}, reg2) // mov [ecx], eax -> 67 89 01
	// writer.MovIntegralConstantToIntegralRegister(raxFam.UseForSize(codegen.QWORD_SIZE), 0x1234)
	// writer.MovIntegralConstantToIntegralRegister(raxFam.UseForSize(codegen.DWORD_SIZE), 0x1234)
	// writer.MovIntegralConstantToIntegralRegister(raxFam.UseForSize(codegen.WORD_SIZE), 0x1234)
	// writer.MovIntegralConstantToIntegralRegister(raxFam.UseForSize(codegen.BYTE_SIZE), 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg1}, 1, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg1}, 2, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg1}, 4, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg1}, 8, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg2}, 1, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg2}, 2, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg2}, 4, 0x12)
	// writer.MovIntegralConstantToMemory(codegen.RegisterMemoryAccessor{reg2}, 8, 0x12)
	// writer.MovIntegralRegisterToMemory(codegen.LabeledMemoryAccessor{"test"}, raxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.MovIntegralRegisterToMemory(codegen.LabeledMemoryAccessor{"test"}, raxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovMemoryToIntegralRegister(raxFam.UseForSize(codegen.QWORD_SIZE), codegen.LabeledMemoryAccessor{"test"})
	// writer.MovMemoryToIntegralRegister(raxFam.UseForSize(codegen.DWORD_SIZE), codegen.LabeledMemoryAccessor{"test"})
	// writer.JumpToLabel("test")
	// writer.JumpIfZero("test")
	// writer.PushIntegralReg(raxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.PushIntegralReg(raxFam.UseForSize(codegen.WORD_SIZE))
	// writer.PushIntegralReg(rspFam.UseForSize(codegen.QWORD_SIZE))
	// writer.AddIntegralRegisters(raxFam.UseForSize(codegen.QWORD_SIZE), rcxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.AddIntegralRegisters(raxFam.UseForSize(codegen.DWORD_SIZE), rcxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.AddIntegralRegisters(raxFam.UseForSize(codegen.WORD_SIZE), rcxFam.UseForSize(codegen.WORD_SIZE))
	// writer.AddIntegralRegisters(raxFam.UseForSize(codegen.BYTE_SIZE), rcxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.AddIntegralRegisters(r10Fam.UseForSize(codegen.QWORD_SIZE), rcxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.AddIntegralRegisters(r10Fam.UseForSize(codegen.DWORD_SIZE), rcxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.AddIntegralRegisters(r10Fam.UseForSize(codegen.WORD_SIZE), rcxFam.UseForSize(codegen.WORD_SIZE))
	// writer.AddIntegralRegisters(r10Fam.UseForSize(codegen.BYTE_SIZE), rcxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.AddConstantInteger(raxFam.UseForSize(codegen.QWORD_SIZE), 1)
	// writer.AddConstantInteger(raxFam.UseForSize(codegen.DWORD_SIZE), 1)
	// writer.AddConstantInteger(raxFam.UseForSize(codegen.WORD_SIZE), 1)
	// writer.AddConstantInteger(raxFam.UseForSize(codegen.BYTE_SIZE), 1)
	// writer.AddConstantInteger(r10Fam.UseForSize(codegen.QWORD_SIZE), 1)
	// writer.AddConstantInteger(r10Fam.UseForSize(codegen.DWORD_SIZE), 1)
	// writer.AddConstantInteger(r10Fam.UseForSize(codegen.WORD_SIZE), 1)
	// writer.AddConstantInteger(r10Fam.UseForSize(codegen.BYTE_SIZE), 1)
	// writer.SignedMultiplyIntegralRegisters(raxFam.UseForSize(codegen.WORD_SIZE), r10Fam.UseForSize(codegen.WORD_SIZE))
	// writer.SignedMultiplyIntegralRegisters(raxFam.UseForSize(codegen.DWORD_SIZE), r10Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.SignedMultiplyIntegralRegisters(raxFam.UseForSize(codegen.QWORD_SIZE), r10Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.SignedDivideRaxRdxByIntegralRegister(rcxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.SignedDivideRaxRdxByIntegralRegister(rcxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.SignedDivideRaxRdxByIntegralRegister(rcxFam.UseForSize(codegen.WORD_SIZE))
	// writer.SignedDivideRaxRdxByIntegralRegister(rcxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(raxFam.UseForSize(codegen.QWORD_SIZE), raxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(raxFam.UseForSize(codegen.DWORD_SIZE), raxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(raxFam.UseForSize(codegen.WORD_SIZE), raxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(r10Fam.UseForSize(codegen.QWORD_SIZE), raxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(r10Fam.UseForSize(codegen.DWORD_SIZE), raxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(r10Fam.UseForSize(codegen.WORD_SIZE), raxFam.UseForSize(codegen.BYTE_SIZE))
	// writer.ZeroExtend(r10Fam.UseForSize(codegen.DWORD_SIZE), raxFam.UseForSize(codegen.WORD_SIZE))
	// writer.Reference(raxFam.UseForSize(codegen.QWORD_SIZE), codegen.RegisterMemoryAccessor{Register: raxFam.UseForSize(codegen.QWORD_SIZE)})
	// writer.Reference(raxFam.UseForSize(codegen.QWORD_SIZE), codegen.StackFrameOffsetMemoryAccessor{Offset: 4})
	// writer.Reference(raxFam.UseForSize(codegen.QWORD_SIZE), codegen.GOTMemoryAccessor{Symbol: nil})
	// writer.MovFloatingRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), xmm1Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), xmm1Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.MovFloatingRegisterToFloatingRegister(xmm9Fam.UseForSize(codegen.DWORD_SIZE), xmm8Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), xmm8Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToFloatingRegister(xmm8Fam.UseForSize(codegen.DWORD_SIZE), xmm0Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToMemory(codegen.RegisterMemoryAccessor{Register: reg1}, xmm0Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToMemory(codegen.RegisterMemoryAccessor{Register: reg1}, xmm0Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.MovFloatingRegisterToMemory(codegen.RegisterMemoryAccessor{Register: reg2}, xmm0Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToMemory(codegen.RegisterMemoryAccessor{Register: reg2}, xmm0Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.MovFloatingRegisterToMemory(codegen.RegisterMemoryAccessor{Register: reg1}, xmm8Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovFloatingRegisterToMemory(codegen.RegisterMemoryAccessor{Register: reg2}, xmm8Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.MovMemoryToFloatingResgister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), codegen.RegisterMemoryAccessor{Register: reg1})
	// writer.MovMemoryToFloatingResgister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), codegen.RegisterMemoryAccessor{Register: reg1})
	// writer.MovMemoryToFloatingResgister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), codegen.RegisterMemoryAccessor{Register: reg2})
	// writer.MovMemoryToFloatingResgister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), codegen.RegisterMemoryAccessor{Register: reg2})
	// writer.MovMemoryToFloatingResgister(xmm8Fam.UseForSize(codegen.DWORD_SIZE), codegen.RegisterMemoryAccessor{Register: reg1})
	// writer.MovMemoryToFloatingResgister(xmm8Fam.UseForSize(codegen.DWORD_SIZE), codegen.RegisterMemoryAccessor{Register: reg2})
	// writer.CompareFloatingRegisters(xmm0Fam.UseForSize(codegen.DWORD_SIZE), xmm1Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.CompareFloatingRegisters(xmm0Fam.UseForSize(codegen.QWORD_SIZE), xmm1Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.CompareFloatingRegisters(xmm8Fam.UseForSize(codegen.DWORD_SIZE), xmm9Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.CompareFloatingRegisters(xmm8Fam.UseForSize(codegen.QWORD_SIZE), xmm9Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.CompareFloatingRegisters(xmm8Fam.UseForSize(codegen.DWORD_SIZE), xmm1Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.CompareFloatingRegisters(xmm8Fam.UseForSize(codegen.QWORD_SIZE), xmm1Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), xmm1Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), xmm1Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertFloatingRegisterToFloatingRegister(xmm8Fam.UseForSize(codegen.DWORD_SIZE), xmm9Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToFloatingRegister(xmm8Fam.UseForSize(codegen.QWORD_SIZE), xmm9Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), raxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), raxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), raxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), raxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm8Fam.UseForSize(codegen.QWORD_SIZE), raxFam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm8Fam.UseForSize(codegen.QWORD_SIZE), r10Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertIntegralRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.QWORD_SIZE), r10Fam.UseForSize(codegen.QWORD_SIZE))	// writer.ConvertIntegralRegisterToFloatingRegister(xmm0Fam.UseForSize(codegen.DWORD_SIZE), raxFam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(raxFam.UseForSize(codegen.DWORD_SIZE), xmm0Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(raxFam.UseForSize(codegen.QWORD_SIZE), xmm0Fam.UseForSize(codegen.DWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(raxFam.UseForSize(codegen.DWORD_SIZE), xmm0Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(raxFam.UseForSize(codegen.QWORD_SIZE), xmm0Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(raxFam.UseForSize(codegen.QWORD_SIZE), xmm8Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(r10Fam.UseForSize(codegen.QWORD_SIZE), xmm8Fam.UseForSize(codegen.QWORD_SIZE))
	// writer.ConvertFloatingRegisterToIntegralRegister(r10Fam.UseForSize(codegen.QWORD_SIZE), xmm0Fam.UseForSize(codegen.QWORD_SIZE))
	fmt.Println(raxFam, r10Fam, rspFam, reg1, reg2, rcxFam, xmm0Fam, xmm1Fam, xmm8Fam, xmm9Fam)
	assembly := writer.GetAssembly()
	asmLines := []codegen.AsmLine{}
	for _, f := range assembly {
		asmLines = append(asmLines, f.Code...)
	}
	relocator := asm.NewRelocator()
	assembler := asm.NewAssembler(relocator)
	assembler.AssembleMultiple(asmLines)
	assembler.PrintAssemblyAlongAssembledBytes()
	fmt.Println("")
}
